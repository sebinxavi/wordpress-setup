---

- name: "Wordpress Installation On LEMP -Stack on CentOS and Ubuntu "
  become: true
  hosts: all
  vars:
    httpd_port: 80
    httpd_user: "apache"
    httpd_group: "apache"
    nginx_port: 80
    nginx_user: "www-data"
    nginx_group: "www-data"
    domain_name: "www.domain.com"
    mysql_root: "mysqlroot123"
    mysql_user: "wordpress"
    mysql_password: "wordpress"
    mysql_database: "wordpress"
    wordpress_url: "https://wordpress.org/wordpress-5.7.2.tar.gz"
  tasks:
    - name: "Apache - Installing Apache Webserver"
      when: ansible_os_family == 'RedHat'
      yum:
        name: httpd
        state: present
    
    
    - name: "Apache - Installing PHP Extenion"
      when: ansible_os_family == 'RedHat'
      shell: yum install php -y
    
    
    - name: "Apache - Creating Httpd Configuration File"
      when: ansible_os_family == 'RedHat'
      template:
        src: httpd.conf.tmpl
        dest: /etc/httpd/conf/httpd.conf
      
    
    - name: "Apache - Creating VirtualHost"
      when: ansible_os_family == 'RedHat'
      template:
        src: httpd-virtualhost.conf.tmpl
        dest: "/etc/httpd/conf.d/{{ domain_name }}.conf"
            
            
    - name: "Apache - Creating VirtualHost DocumentRoot"
      when: ansible_os_family == 'RedHat'
      file:
        path: "/var/www/html/{{ domain_name }}"
        state: directory 
        owner: "{{ httpd_user }}"
        group: "{{ httpd_group }}"
            
            
    - name: "Apache - Creating test.php info file"
      when: ansible_os_family == 'RedHat'
      copy:
        content: "<?php phpinfo(); ?>"
        dest: "/var/www/html/{{ domain_name }}/test.php"
        owner: "{{ httpd_user }}"
        group: "{{ httpd_group }}"
            
    - name: "Apache - Restart/Enable Service"
      when: ansible_os_family == 'RedHat'
      service:
        name: httpd
        state: restarted
        enabled: true
            
    - name: "mariadb - package Installation"
      when: ansible_os_family == 'RedHat'
      yum:
        name: 
          - mariadb-server
          - MySQL-python
        state: present
    
    - name: "mariadb - restarting/enabling service"
      when: ansible_os_family == 'RedHat'
      service:
        name: mariadb
        state: restarted
        enabled: true
            
    - name: "maridb - update root password"
      when: ansible_os_family == 'RedHat'
      ignore_errors: true
      mysql_user:
        login_user: "root"
        login_password: ""
        user: "root"
        password: "{{ mysql_root }}"
        host_all: true
            
    - name: "mariadb - removing anonymous users"
      when: ansible_os_family == 'RedHat'
      mysql_user:
        login_user: "root"
        login_password: "{{ mysql_root }}"
        user: ""
        state: absent
            
    - name: "mariadb - removing test database"
      when: ansible_os_family == 'RedHat'
      mysql_db:
        login_user: "root"
        login_password: "{{ mysql_root }}"
        name: "test"
        state: absent
            
            
    - name: "mariadb - creating database"
      when: ansible_os_family == 'RedHat'
      mysql_db:
        login_user: "root"
        login_password: "{{ mysql_root }}"
        name: "{{ mysql_database }}"
        state: present
            
    - name: "mariadb - creating user & password"
      when: ansible_os_family == 'RedHat'
      mysql_user:
        login_user: "root"
        login_password: "{{ mysql_root }}"
        user: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        host: "%"
        priv: '{{ mysql_database }}.*:ALL' 
            
    - name: "Wordpress - Downloading Tar File"
      when: ansible_os_family == 'RedHat'
      get_url:
        url: "{{ wordpress_url }}"
        dest: /tmp/wordpress.tar.gz
            
    - name: "Wordpress - Extracting Wordpress.tar"
      when: ansible_os_family == 'RedHat'
      unarchive:
        src: /tmp/wordpress.tar.gz
        dest: /tmp/
        remote_src: true
            
    - name: "Wordpress - Copying Contents"
      when: ansible_os_family == 'RedHat'
      copy:
        src: /tmp/wordpress/
        dest: "/var/www/html/{{  domain_name  }}/"
        remote_src: true
        owner: "{{ httpd_user }}"
        group: "{{ httpd_group }}"
            
    - name: "Wordpress - Creating wp-config.php"
      when: ansible_os_family == 'RedHat'
      template:
        src: wp-config.php.tmpl
        dest: "/var/www/html/{{  domain_name  }}/wp-config.php"
        owner: "{{ httpd_user }}"
        group: "{{ httpd_group }}"
            
    
    - name: "Post-Installation Restart"
      when: ansible_os_family == 'RedHat'
      service:
        name: "{{ item }}"
        state: restarted
      with_items:
        - httpd
        - mariadb
        
    - name: "Post-Installation Clean-Up"
      when: ansible_os_family == 'RedHat'
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /tmp/wordpress
        - /tmp/wordpress.tar.gz


##################################################################################################

    - name: "nginx - Installing nginx php Webserver"
      when: ansible_os_family == "Debian"
      apt:
        pkg:
          - nginx
          - php
        state: present
        update_cache: true

    - name: "nginx - Creating nginx Configuration File"
      when: ansible_os_family == "Debian"
      template:
        src: nginx.conf.tmp1
        dest: /etc/nginx/nginx.conf


    - name: "nginx - Creating VirtualHost"
      when: ansible_os_family == "Debian"
      template:
        src: nginx-virtualhost.conf.tmpl
        dest: "/etc/nginx/conf.d/{{ domain_name }}.conf"


    - name: "nginx - Creating VirtualHost DocumentRoot"
      when: ansible_os_family == "Debian"
      file:
        path: "/var/www/html/{{ domain_name }}"
        state: directory
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"


    - name: "nginx - Creating test.php info file"
      when: ansible_os_family == "Debian"
      copy:
        content: "<?php phpinfo(); ?>"
        dest: "/var/www/html/{{ domain_name }}/test.php"
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"

    - name: "nginx - Restart/Enable Service"
      when: ansible_os_family == "Debian"
      service:
        name: nginx
        state: restarted
        enabled: true

    - name: "MySQL - package Installation"
      when: ansible_os_family == "Debian"
      apt:
        pkg:
          - mysql-server
          - python3-mysqldb
        state: present
        update_cache: true

    - name: "mysql - restarting/enabling service"
      when: ansible_os_family == "Debian"
      service:
        name: mysql
        state: restarted
        enabled: true

    - name: "mysql - update root password"
      when: ansible_os_family == "Debian"
      ignore_errors: true
      mysql_user:
        login_user: "root"
        login_password: ""
        user: "root"
        password: "{{ mysql_root }}"
        host_all: true

    - name: "mysql - removing anonymous users"
      when: ansible_os_family == "Debian"
      mysql_user:
        login_user: "root"
        login_password: "{{ mysql_root }}"
        user: ""
        state: absent

    - name: "mysql - removing test database"
      when: ansible_os_family == "Debian"
      mysql_db:
        login_user: "root"
        login_password: "{{ mysql_root }}"
        name: "test"
        state: absent


    - name: "mysql - creating database"
      when: ansible_os_family == "Debian"
      mysql_db:
        login_user: "root"
        login_password: "{{ mysql_root }}"
        name: "{{ mysql_database }}"
        state: present

    - name: "mysql - creating user & password"
      when: ansible_os_family == "Debian"
      mysql_user:
        login_user: "root"
        login_password: "{{ mysql_root }}"
        user: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        host: "%"
        priv: '{{ mysql_database }}.*:ALL'

    - name: "Wordpress - Downloading Tar File"
      when: ansible_os_family == "Debian"
      get_url:
        url: "{{ wordpress_url }}"
        dest: /tmp/wordpress.tar.gz

    - name: "Wordpress - Extracting Wordpress.tar"
      when: ansible_os_family == "Debian"
      unarchive:
        src: /tmp/wordpress.tar.gz
        dest: /tmp/
        remote_src: true

    - name: "Wordpress - Copying Contents"
      when: ansible_os_family == "Debian"
      copy:
        src: /tmp/wordpress/
        dest: "/var/www/html/{{  domain_name  }}/"
        remote_src: true
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"

    - name: "Wordpress - Creating wp-config.php"
      when: ansible_os_family == "Debian"
      template:
        src: wp-config.php.tmpl
        dest: "/var/www/html/{{  domain_name  }}/wp-config.php"
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"


    - name: "Post-Installation Restart"
      when: ansible_os_family == "Debian"
      service:
        name: "{{ item }}"
        state: restarted
      with_items:
        - nginx
        - mysql

    - name: "Post-Installation Clean-Up"
      when: ansible_os_family == "Debian"
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /tmp/wordpress
        - /tmp/wordpress.tar.gz
